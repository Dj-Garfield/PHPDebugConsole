<?xml version="1.0"?>
<ruleset name="PHPDebugConsole">

    <description>PSR-12 plus commenting</description>

    <!--
    ComposerScripts::postUpdate will uncomment & update this
    <config name="installed_paths" value="vendor/slevomat/coding-standard" />
    -->

    <rule ref="./sniffs/">
        <exclude name="bdk.Commenting.FunctionComment.EmptyThrows" />
        <exclude name="bdk.Commenting.FunctionComment.ParamCommentFullStop" />
        <exclude name="bdk.Commenting.FunctionComment.ParamCommentNotCapital" />
        <exclude name="bdk.Commenting.FunctionComment.ScalarTypeHintMissing" />
        <exclude name="bdk.Commenting.FunctionComment.ThrowsNoFullStop" />
        <exclude name="bdk.Commenting.FunctionComment.ThrowsNotCapital" />
        <exclude name="bdk.Commenting.FunctionComment.TypeHintMissing" />
        <exclude name="bdk.Operators.ComparisonOperatorUsage.ImplicitTrue" />
        <exclude name="bdk.Operators.ComparisonOperatorUsage.!NotAllowed" />
    </rule>

    <rule ref="PSR12">
        <exclude name="PSR12.Properties.ConstantVisibility.NotFound" />
    </rule>

    <rule ref="Generic">
        <exclude name="Generic.Arrays.ArrayIndent.CloseBraceNotNewLine" />
        <exclude name="Generic.Arrays.DisallowLongArraySyntax.Found" /> <!-- short array syntax = php 5.4 -->
        <exclude name="Generic.Arrays.DisallowShortArraySyntax.Found" />
        <exclude name="Generic.Classes.OpeningBraceSameLine.BraceOnNewLine" />
        <exclude name="Generic.CodeAnalysis.AssignmentInCondition.FoundInWhileCondition" />
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCATCH" />
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterface" />
        <exclude name="Generic.Commenting.DocComment.LongNotCapital" />
        <exclude name="Generic.Commenting.DocComment.MissingShort" />
        <exclude name="Generic.Commenting.DocComment.ShortNotCapital" />
        <exclude name="Generic.Files.EndFileNewline.NotFound" /> <!-- handled by PSR-12 -->
        <exclude name="Generic.Files.EndFileNoNewline.Found" />
        <exclude name="Generic.Files.InlineHTML.Found" />
        <exclude name="Generic.Files.LineLength.TooLong" />
        <exclude name="Generic.Files.LowercasedFilename.NotFound" />
        <exclude name="Generic.Formatting.MultipleStatementAlignment.NotSameWarning" />
        <exclude name="Generic.Formatting.NoSpaceAfterCast.SpaceFound" />
        <exclude name="Generic.Formatting.SpaceAfterNot.Incorrect" />
        <exclude name="Generic.Formatting.SpaceBeforeCast.NoSpace" />
        <exclude name="Generic.Functions.OpeningFunctionBraceKernighanRitchie.BraceOnNewLine" />
        <exclude name="Generic.NamingConventions.CamelCapsFunctionName.ScopeNotCamelCaps" /> <!-- Handled by PSR-12 -->
        <exclude name="Generic.PHP.ClosingPHPTag.NotFound" />
        <exclude name="Generic.PHP.RequireStrictTypes.MissingDeclaration" />
        <exclude name="Generic.PHP.Syntax.PHPSyntax" />
        <exclude name="Generic.PHP.UpperCaseConstant.Found" />
        <exclude name="Generic.Strings.UnnecessaryStringConcat.Found" />
        <exclude name="Generic.WhiteSpace.ArbitraryParenthesesSpacing.SpaceBeforeClose" />
        <exclude name="Generic.WhiteSpace.DisallowSpaceIndent.SpacesUsed" />
        <exclude name="Generic.WhiteSpace.DisallowTabIndent.NonIndentTabsUsed" />
        <exclude name="Generic.WhiteSpace.DisallowTabIndent.TabsUsed" />
    </rule>
    <rule ref="Generic.PHP.NoSilencedErrors.Discouraged">
        <exclude-pattern>FileStreamWrapper\.php</exclude-pattern>
    </rule>

    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <!--
        composer require slevomat/coding-standard - -dev
    -->
    <rule ref="SlevomatCodingStandard.Arrays" />
    <rule ref="SlevomatCodingStandard.Classes.ClassStructure">
        <properties>
            <property name="groups" type="array">
                <element value="uses" />
                <element value="public constants" />
                <element value="protected constants" />
                <element value="private constants" />
                <element value="public static properties, public properties" />
                <element value="protected properties, protected static properties, private properties, private static properties" />
                <element value="constructor " />
                <element value="destructor, magic methods" />
                <element value="public methods, public static methods, static constructors, public abstract methods, public static abstract methods" />
                <element value="protected methods, protected static methods, private methods, private static methods, protected abstract methods, protected static abstract methods" />
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.UselessLateStaticBinding" />
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration" />
    <!--
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure" />
    -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure" />
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue" />
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses" />
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias" />
    <rule ref="SlevomatCodingStandard.PHP.RequireExplicitAssertion" />
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses" />
    <rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking" />
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon" />
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable" />
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable" />
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses" />
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses" />
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses" />
    <!--
    Rule seems to be broken on codacy..
    Not necessary to catch here... will be caught by unit test
    <rule ref="SlevomatCodingStandard.Files.TypeNameMatchesFileName">
        <properties>
            <property name="rootNamespaces" type="array">
                <element key="src" value="bdk"/>
            </property>
        </properties>
        <exclude-pattern>src/Backtrace/Backtrace.php</exclude-pattern>
        <exclude-pattern>src/Debug/Debug.php</exclude-pattern>
        <exclude-pattern>src/ErrorHandler/ErrorHandler.php</exclude-pattern>
    </rule>
    -->
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions" />
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />
    <!--
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <property name="forbiddenAnnotations" type="array">
            <element value="@author, @created, @version, @package, @copyright, @license, @throws" />
        </property>
    </rule>
    -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="#\[\w+ description\]#" />
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn" />
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator" />

    <rule ref="Squiz.Commenting">
        <exclude name="Squiz.Commenting.BlockComment.NoCapital" />
        <exclude name="Squiz.Commenting.BlockComment.NoEmptyLineAfter" />
        <exclude name="Squiz.Commenting.BlockComment.NoEmptyLineBefore" />
        <exclude name="Squiz.Commenting.ClassComment.ShortFullStop" />
        <exclude name="Squiz.Commenting.ClassComment.TagNotAllowed" />
        <exclude name="Squiz.Commenting.ClosingDeclarationComment.Missing" />
        <exclude name="Squiz.Commenting.FileComment.AuthorTagOrder" />
        <exclude name="Squiz.Commenting.FileComment.IncorrectAuthor" />
        <exclude name="Squiz.Commenting.FileComment.IncorrectCopyright" />
        <exclude name="Squiz.Commenting.FileComment.MissingPackageTag" />
        <exclude name="Squiz.Commenting.FileComment.MissingSubpackageTag" />
        <exclude name="Squiz.Commenting.FileComment.PackageTagOrder" />
        <exclude name="Squiz.Commenting.FileComment.ShortFullStop" />
        <exclude name="Squiz.Commenting.FileComment.SpacingAfterOpen" /> <!-- conflicts with PSR12 -->
        <exclude name="Squiz.Commenting.FileComment.SubpackageTagOrder" />

        <!--
            FunctionComment refuses to acknowledge @inheritdoc
        -->
        <exclude name="Squiz.Commenting.FunctionComment" />

        <exclude name="Squiz.Commenting.FunctionCommentThrowTag.Missing" />
        <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar" />
        <exclude name="Squiz.Commenting.InlineComment.NotCapital" />
        <exclude name="Squiz.Commenting.InlineComment.SpacingAfter" />
        <exclude name="Squiz.Commenting.InlineComment.SpacingBefore" />
        <exclude name="Squiz.Commenting.InlineComment.WrongStyle" />
        <!--
            refuses to acknowledge @inheritdoc
        -->
        <exclude name="Squiz.Commenting.LongConditionClosingComment.Missing" />
        <exclude name="Squiz.Commenting.PostStatementComment.Found" />
        <exclude name="Squiz.Commenting.VariableComment.Missing" />
        <exclude name="Squiz.Commenting.VariableComment.WrongStyle" />
    </rule>
    <rule ref="Squiz.Commenting.FileComment.Missing">
        <severity>4</severity>
    </rule>
    <rule ref="Squiz.Commenting.BlockComment.FirstLineIndent">
        <severity>4</severity>
    </rule>
    <rule ref="Squiz.Commenting.BlockComment.LineIndent">
        <severity>4</severity>
    </rule>
    <rule ref="Squiz.Commenting.FileComment.MissingCopyrightTag">
        <severity>4</severity>
    </rule>
    <rule ref="Squiz.Commenting.FileComment.MissingAuthorTag">
        <severity>4</severity>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.ShortNotCapital">
        <severity>4</severity>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.ParamCommentNotCapital">
        <severity>4</severity>
    </rule>

    <rule ref="Squiz.Functions">
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine" /> <!-- handled by Generic.Functions -->
    </rule>

    <rule ref="Squiz.Operators">
        <!-- ComparisonOperatorUsage sniff is too broad -->
        <exclude name="Squiz.Operators.ComparisonOperatorUsage" />
    </rule>

    <rule ref="Squiz.PHP">
        <exclude name="Squiz.PHP.DisallowInlineIf" />
        <exclude name="Squiz.PHP.DisallowBooleanStatement" />
        <exclude name="Squiz.PHP.DisallowComparisonAssignment" />
    </rule>
    <rule ref="Squiz.PHP.CommentedOutCode">
        <properties>
            <property name="maxPercentage" value="70" />
        </properties>
    </rule>
    <rule ref="Squiz.PHP.DiscouragedFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array"
                value="create_function=>null,delete=>unset,print=>echo,sizeof=>count" />
        </properties>
    </rule>

    <rule ref="Squiz.Scope" />
    <rule ref="Squiz.Strings.DoubleQuoteUsage" />
    <rule ref="Zend.Debug.CodeAnalyzer"/>

</ruleset>
